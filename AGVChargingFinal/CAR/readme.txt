Readme
1. 文件结构介绍
car_controlV2是主函数
|——parameter 是文件的主要参数集合
|——pure_pursuit是车辆循迹算法
	|——unicycle_model是车辆模型代码
|——reeds_shepp_path_planning是路径规划
|——socket_server是socket通信代码
|——pid_control是车辆运动控制部分

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
！！！注意！！！！！拿到新设备，第一件事是设定socket_server中的IP地址，在第7行！！！
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

2. 目前整体没有用有限状态机写，控制逻辑用一个大的if，else完成

3. 一般的车辆侧运行过程是：收到起点终点坐标（start=(),goal=())——执行轨迹规划——执行轨迹循迹（计算每个时刻的角速度，速度）——返回给基站侧轨迹和速度、角度数组——等待基站侧下发允许运动的指令（go）——接收到允许运动指令——线程t2开始控制车辆运动——运动结束
期间基站侧不断查询车辆运动状态，如果车辆在运动返回Y，否则返回N。
细调节过程：接受细调节动作指令——车辆运动

4. 通信帧格式和内涵：
车辆侧接受到的：
start=(787, 30, 0),goal=(787, 1018, 0)  	车辆起点终点坐标
Stationary				车辆运动状态查询
go				车辆开始运动命令
s				车辆紧急停止命令
R2， R1				车辆向右细调节（两档）		
L2， L1				车辆向左细调节（两档）				
B4，B3，B2，B1			车辆后退细调节（四档）
F				车辆前进细调节
G4，G3，G2，G1，C2		车辆整体左右平移细调节

车辆侧发送的：
{};{};{};{};{};{};{};OK		车辆规划路线x坐标，车辆规划路线y坐标，循迹x坐标，循迹y坐标，循迹v值,循迹前轮转角值，dt
Y/N			车辆运动状态


改进建议：
1. 总体采用有限状态机写。
2. 细调节部分建议单独写成一个子类，开始动作的时候用新开一个线程控制。同时，主程序可以查询这个子类的状态，确定是否动作结束。
3. car_controlV2.py是经过测试的版本，car_controlV3.py是整理过的版本，未在车上试验过。